section.intro
  p
    | This study of integers begins with the notion of
    em< divisibility
    |
      , whether the division of two integers results in an integer.  Since division does not
      always yield a result at all, let alone an integer result, we frame this question in
      terms of multiplication.

  blockquote.definition
    p
      strong> definition.
      | Given two integers $ a, b $, we say that $ b $
      em<> divides
      |
        $ a $ if there is some integer $ n $ for which $ a = b \cdot n $.  If $ b $ divides
        $ a $, we write $ b \mid a $.  If $ b $ does not divide $ a $, we write $b \nmid a $.

    hr

    p The following statements are equivalent ways of describing that $ b \mid a $.

    == render "ebe/_divisibility_descriptions", :locals => { :dividend => "a", :divisor => "b", :divides => true }

section.examples
  h2 examples

  ol
    li.example
      | Does $ 15 $ divide $ 45 $?
      .solution-container
        strong> yes.
        | $ 15 \mid 45 $ since $ 45 = 15 \cdot 3 $.  In other words,

        == render "ebe/_divisibility_descriptions", :locals => { :dividend => 45, :divisor => 15, }

    li.example
      | Does $ 10 $ divide $ 45 $?
      .solution-container
        strong> no.
        |
          $ 10 \nmid 45 $ since $ 45 $ is strictly between $ 10 \cdot 4 $ and
          $ 10 \cdot 5 $, which shows that $ 45 = 10 \cdot n $ is impossible.

        == render "ebe/_divisibility_descriptions", :locals => { :dividend => 45, :divisor => 10, }

    li.example
      == render "components/_scroll_form"
        | Does
        input> id="divisor" name="divisor" value="#{@view.divisor}" type="number" required="true" placeholder="divisor"
        | divide
        input> id="dividend" name="dividend" value="#{@view.dividend}" type="number" required="true" placeholder="dividend"
        | ?
        input type="submit" value="submit"

      - if @view.divisor && @view.dividend
        - answer = @view.divides? ? "yes" : "no"
        - symbol = @view.divides? ? '\mid' : '\nmid'
        - if @view.divides?
          - details = "$ #{@view.dividend} = #{@view.divisor} \\cdot #{@view.quotient} $"
        - elsif @view.divisor == 0
          - details = "$ #{@view.dividend} = #{@view.divisor} \\cdot n $ is not possible for any value of $ n $." if @view.divisor == 0
        - else
          - bounds = @view.multipliers.map { |m| "$ #{@view.divisor} \\cdot #{m} $" }
          - details = "$ #{@view.dividend} $ is strictly between #{bounds.join(" and ")}" if !@view.divides? && @view.divisor != 0

        .solution-container
          strong> #{answer}.
          | $ #{@view.divisor} #{symbol} #{@view.dividend} $ since #{details}.

          == render "ebe/_divisibility_descriptions", :locals => { :dividend => @view.dividend, :divisor => @view.divisor, }

section
  h2 careful!
  p
    |
      This notation $ a \mid b $ is sometimes confused with notation for the division
      operation. If you see $ 15 / 45 $, it is the division operation that returns the
      rational number $ 1 / 3 $. If you see $ 15 \mid 45 $, it is the statement that
      $ 45 $ is divisible by $ 15 $, ie, that $ 45 / 15 $ is an integer.

section.exercises
  h2 exercises

  ol
    li.exercise
      | Write a naive
      code<> divides
      | function that takes two integer inputs and returns
      code<> true
      | if the first divides the second and returns
      code<> false
      |
        otherwise. This naive function should only use addition, subtraction,
        multiplication, and comparison.

      p Some test values:
      ul
        - for example in @view.divides_examples
          li
            code divides(#{example[:divisor]}, #{example[:dividend]}) ~> #{example[:divides?]}

      == render "components/_solution", :locals => { :id => "exercise-divides" }
        pre
          code.language-ruby
            == @view.naive_code_snippet


    li.exercise
      p Prove that every nonzero integer divides 0.

      == render "components/_solution", :locals => { :id => "example-1" }
        p For any nonzero integer $ b $, we can express $ 0 $ as $ 0 = b \cdot 0 $, which
          proves that $ b \mid 0 $.

    li.exercise
      p Prove that every integer is divisible by both $ 1 $ and $ -1 $.

      == render "components/_solution", :locals => { :id => "example-2" }
        p Let $ a $ be any integer.  We can express $ a $ as $ a = 1 \cdot a $, which
          shows that $ 1 \mid a $.  We can also express $ a $ as $ a = -1 \cdot (-a) $,
          which shows that $ -1 \mid a $.

    li.exercise
      p Prove that every nonzero integer divides itself.

      == render "components/_solution", :locals => { :id => "example-3" }
        p For any nonzero integer $ a $, we can express $ a $ as $ a = a \cdot 1 $, which
          shows that $ a \mid a $.

    li.exercise
      p If $ b \mid a $, prove that $ -b \mid a $ and $ b \mid -a $.

      == render "components/_solution", :locals => { :id => "example-4" }
        p Since $ b \mid a $, there is an integer $ n $ such that $ a = b \cdot n $.
          Then
          $$ a = (-b) \cdot (-n) \quad \implies \quad -b \mid a $$
          and
          $$ -a = b \cdot (-n) \quad \implies \quad b \mid -a . $$

    li.exercise
      p If $ c \mid a $ and $ c \mid b $, prove that $ c $ divides the sum $ a + b $.

      == render "components/_solution", :locals => { :id => "example-5" }
        p Since $ c \mid a $, we can write $ a = c \cdot m $ for some integer $ m $.
          And since $ c \mid b $, we can write $ b = c \cdot n $ for some integer $ n $.
          The sum $ a + b $ can then be expressed as
          $$ a + b = (c \cdot m) + (c \cdot n) = c \cdot (m + n), $$
          which shows that $ c \mid (a + b) $.

    li.exercise
      p Prove that the "divides" relation is transitive.  In other words, if $ c \mid b $
        and $ b \mid a $, prove that $ c \mid a $.

      == render "components/_solution", :locals => { :id => "example-6" }
        p The first assumption, that $ c \mid b $, means that we can write
          $ b = c \cdot m $ for some integer $ m $.  The second assumption, that
          $ b \mid a $, means that we can write $ a = b \cdot n $ for some integer $ n $.
          Substituting the first equation in for $ b $ in the second equation yields
          \[
            a = (c \cdot m) \cdot n
            \quad \implies \quad
            a = c \cdot (m \cdot n).
          \]
          Since we have expressed $ a $ as an integer multiple of $ c $, we conclude that
          $ c \mid a $.

