p
  | The
  code<> divides
  | function from the previous section employed a
  code<> while
  |
    loop without discussing whether or not it will terminate.



blockquote.definition
  p
    strong> definition.
    | For a nonzero integer $ a $, the set of
    em<> divisors
    | of $ a $ consists of the positive integers that divide $ a $.

  hr

  p Note that the set of divisors of $ 0 $ is undefined because every integer divides $ 0 $.

.examples
  h2 examples

  ol
    li.example
      | What are the divisors of $ 100 $?

      .solution-container
        | The divisors of $ 100 $ are $$ 1, 2, 4, 5, 10, 20, 25, 50, 100 . $$

    li.example
      | What are the divisors of $ 42 $?

      .solution-container
        | The divisors of $ 42 $ are $$ 1, 2, 3, 6, 7, 14, 21, 42 . $$

    li.example
      == render "components/_scroll_form"
        | What are the divisors of
        input> id="integer" name="integer" value="#{@view.integer}" type="number" required=true placeholder="integer" max="#{@view.maximum}"
        | ?
        input type="submit" value="submit"

      - if @view.integer

        .solution-container
          | The divisors of $ #{@view.integer} $ are
          - if @view.integer == 0
            span> all positive integers.
          - else
            | $$ #{@view.divisors.join(", ")} . $$

.exercises
  h2 exercises

  ol
    li.exercise
      | In the previous section, we wrote a naive
      code<> divides
      |
        function, which is non-performant.  Most programming languages have an efficient
        built-in mechanism for computing divisibility using the modulus operator
      code<> %
      | (or something equivalent).  Explicitly, an integer
      code<> a
      | is divisible by a nonzero integer
      code<> b
      | if and only if
      code< b % a == 0
      | .  Use this to write an improved
      code<> divides
      | function.  It should pass all the same tests as the naive one.

      == render "components/_solution", :locals => { :id => "example-1" }
        pre
          code.language-ruby
            = @view.divides_snippet

    li.exercise
      p If $ a $ and $ b $ are positive integers such that $ b \mid a $, prove that
        $ b \le a $.

      == render "components/_solution", :locals => { :id => "example-2" }
        p Since $ b \mid a $, there is an integer $ n $ such that $ a = b \cdot n $.
          Since both $ a $ and $ b $ are positive, then $ n $ must be as well, because if
          $ n $ were zero or negative, then multiplying by $ b $ would result in zero or a
          negative number, which is impossible.  Therefore, we can be sure that
          $ 1 \le n $.  Multiplying both sides of this inequality by the positive integer
          $ b $ results in $ b \le b \cdot n $, which can be rewritten as $ b \le a $.

    li.exercise
      | Write a
      code<> divisors
      |
        function that takes an integer input and returns the sorted array of its divisors.
        (Hint: use exercises #1 and #2)

      p Some test values:
      ul
        - for example in @view.divisors_examples
          li
            code divisors(#{example[:integer]}) ~> #{example[:divisors]}

      == render "components/_solution", :locals => { :id => "example-3" }
        pre
          code.language-ruby
            = @view.divisors_snippet

    li.exercise
      p If $ a $ and $ b $ are positive integers such that $ a \mid b $ and $ b \mid a $, prove that
        $ a = b $.  (Hint: use exercise #2)

      == render "components/_solution", :locals => { :id => "example-4" }
        p Since $ b \mid a $, the previous exercise implies that $ b \le a $.  Similarly,
          since $ a \mid b $, the previous exercise implies that $ a \le b $.  This is
          only possible if $ a $ and $ b $ are actually equal.

