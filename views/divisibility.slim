h2 divisibility

markdown:
  This study of integers begins with the notion of *divisibility*: whether
  the division of two integers results in an integer.  Since division does not
  always yield a result at all, let alone an integer result, we frame this
  question in terms of multiplication.

.definition
  markdown:
    A nonzero integer `b` **divides** an integer
    `a` if there exists some integer `n` such that
    `a == b * n`.

    The notation for this is `b | a`, which reads `b`
      divides `a`.  The following statements are equivalent ways of
      describing that `b | a`.

    - `b` divides `a`
    - `b` is a divisor of `a`
    - `a` is divisible by `b`
    - `a` is a multiple of `b`

markdown:
  Here are a couple of examples:

  - `15 | 45` since `45 == 15 * 3`.  In other words,
      - 15 divides 45
      - 15 is a divisor of 45
      - 45 is divisible by 15
      - 45 is a multiple of 15

  - `10 âˆ¤ 45` since `45 != 10 * n` for any integer `n`.
    In fact, `45` is strictly between `10 * 4` and `10 * 5`.
    In other words,
      - 10 does not divide 45
      - 10 is not a divisor of 45
      - 45 is not divisible by 10
      - 45 is not a multiple of 10

.dynamic-example
  h3 example
  h4 question
  form method="POST"
    span Does
    input id="divisor" name="divisor" value="#{@h.divisor}" type="number" required="true" placeholder="divisor"
    span divide
    input id="dividend" name="dividend" value="#{@h.dividend}" type="number" required="true" placeholder="dividend"
    span ??
    input type="submit" value="submit"

  - if @h.has_example?
    .answer
      h4 answer
      p
        strong> #{@h.divides? ? "yes" : "no"}:
        code> #{@h.divisor} #{@h.divides_symbol} #{@h.dividend}

      ul
        - for connector in @h.forward_connectors
          li
            code> #{@h.divisor}
            span> #{connector}
            code> #{@h.dividend}
        - for connector in @h.backward_connectors
          li
            code> #{@h.dividend}
            span> #{connector}
            code> #{@h.divisor}

      p
        strong> because:
        - if @h.divides?
          code #{@h.dividend} == #{@h.divisor} * #{@h.quotient}
        - elsif @h.divisor == 0
          span Zero does not divide any number
        - else
          code> #{@h.dividend}
          span> is strictly between
          code> #{@h.divisor} * #{@h.multipliers.first}
          span> and
          code> #{@h.divisor} * #{@h.multipliers.last}

markdown:
  ```ruby
  #{ @ruby_code }
  ```

